% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by NPRTOOL
%
% This script assumes these variables are defined:
%
%   cancerInputs - input data.
%   cancerTargets - target data.

inputs = final_training';
targets = final_tr_label';

% Create a Pattern Recognition Network
hiddenLayerSize = 50;
net = patternnet(hiddenLayerSize);




% Set up Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 85/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 0;


% Train the Network
[net,tr] = train(net,inputs,targets);

% Test the Network
outputs = net(inputs);
errors = gsubtract(targets,outputs);
performance = perform(net,targets,outputs)

% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
 %figure, plotperform(tr)
 %figure, plottrainstate(tr)
 %figure, plotconfusion(targets,outputs)
 %figure, ploterrhist(errors)
 
outputst = net(fftest');

errors = gsubtract(final_test_label',outputst);
performance = perform(net,final_test_label',outputst)
%figure, plotconfusion(final_test_label',outputst)

predicted_test_labels = (outputst>0.5)';


%% Check
%predicted_test_labels = of_predicted_label;
last_training_index = 0;%round(tr_percent*shapeCount);
shape_result = -ones(shapeCount-last_training_index,55);


for sx = 1: shapeCount-last_training_index % HArd coded
    finof = find(final_test(:,1) == sx+last_training_index ,1,'first');
    N = final_test(finof,2);
    for cx = 0:N
        for ex = 0:expCount-1
            sh_exp_ind =  final_test(:,1) == sx+last_training_index &  final_test(:,3) == cx & final_test(:,4) == ex;
            
            if( ~sum(sh_exp_ind) )
               continue;
            end
            
            predictions = predicted_test_labels(sh_exp_ind);
            
            if(sum(predictions) > 2) 
                prediction_probs = outputst(sh_exp_ind)';
                [~, inx] = sort(prediction_probs,'descend');
                predictions = zeros(size(prediction_probs));
                predictions(inx(1:2)) = 1;
                
                %Select the next corner with max prob
                %left_c = mod(inx(1),length(predictions))+1;
                %right_c = inx(1)-1;
                %if right_c == 0 
                %   right_c =  length(predictions);
                %end
                
                %if prediction_probs(left_c) > prediction_probs(right_c)
                %    predictions(left_c) = 1;
                %else
                %    predictions(right_c) = 1;
                %end
                
            end
              
            
            shape_result(sx,cx*expCount+ex+1) = sum(final_test_label(sh_exp_ind) ~= predictions) == 0;
            if(~shape_result(sx,cx*expCount+ex+1)) 
                [final_test_label(sh_exp_ind) predictions]
                disp('***');
            end
        end
    end
end

accuracy = sum(sum(shape_result == 1)) / sum(sum(shape_result ~= -1))
       


